{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Installation of a Lambda function",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Stack Jenkins"
                    },
                    "Parameters": [
                        "NameRole",
                        "NamePolicy",
                        "NameS3Bucket",
                        "NameS3Key"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "NameRole": {
            "Type": "String",
            "Default": "",
            "Description": "Role name"
        },
        "NamePolicy": {
            "Type": "String",
            "Default": "",
            "Description": "Policy name"
        },
        "NameS3Bucket": {
            "Type": "String",
            "Default": "",
            "Description": "The name of the Amazon S3 bucket where the .zip file that contains your deployment package is stored"
        },
        "NameS3Key": {
            "Type": "String",
            "Default": "",
            "Description": "The location and name of the .zip file that contains your source code"
        }
    },
    "Resources": {
        "FunctionLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "NameS3Bucket"
                    },
                    "S3Key": {
                        "Ref": "NameS3Key"
                    }
                },
                "Handler": "com.entitygroup.monitoringresource.handler.ExcecutorHandler",
                "FunctionName": {
                    "Fn::Sub": "${AWS::StackName}-FunctionLambda"
                },
                "MemorySize": 640,
                "Role": {
                    "Fn::GetAtt": [
                        "RoleForLambda",
                        "Arn"
                    ]
                },
                "Runtime": "java8",
                "Timeout": 60
            }
        },
        "RoleForLambda": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "RoleName": {
                    "Ref": "NameRole"
                }
            }
        },
        "PolicyForLambda": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Ref": "NamePolicy"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObjectAcl",
                                "s3:GetObject",
                                "dynamodb:BatchGetItem",
                                "logs:CreateLogStream",
                                "lambda:InvokeFunction",
                                "dynamodb:DescribeTable",
                                "ec2:CreateTags",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:s3:::s3-us-east-1-p-abg-shared-cloudformation/*",
                                "arn:aws:logs:*:*:*",
                                "arn:aws:lambda:*:*:function:ec2-tags-clone",
                                "arn:aws:dynamodb:us-east-1:286694495060:table/ABG_AWS_PROJECT",
                                "arn:aws:ec2:*:*:subnet/*",
                                "arn:aws:ec2:*:*:route-table/*",
                                "arn:aws:ec2:*:*:vpn-gateway/*",
                                "arn:aws:ec2:*:*:dhcp-options/*",
                                "arn:aws:ec2:*:*:vpn-connection/*",
                                "arn:aws:ec2:*:*:vpc/*",
                                "arn:aws:ec2:*:*:network-interface/*",
                                "arn:aws:ec2:*:*:internet-gateway/*",
                                "arn:aws:ec2:*:*:natgateway/*"
                            ]
                        },
                        {
                            "Sid": "VisualEditor1",
                            "Effect": "Allow",
                            "Action": "ec2:CreateTags",
                            "Resource": [
                                "arn:aws:ec2:*:*:vpc-peering-connection/*",
                                "arn:aws:ec2:*:*:elastic-ip/*"
                            ]
                        },
                        {
                            "Sid": "VisualEditor2",
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeInstances",
                                "ec2:DescribeAddresses",
                                "ec2:DescribeTags",
                                "ec2:DescribeVpcPeeringConnections",
                                "cloudformation:DescribeStackResources",
                                "ec2:DescribeDhcpOptions",
                                "ec2:DescribeNatGateways",
                                "ec2:DescribeInternetGateways",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DescribeVpcs",
                                "ec2:DescribeVolumes",
                                "sts:DecodeAuthorizationMessage",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeRouteTables",
                                "ec2:DescribeVpnGateways",
                                "cloudformation:ListStackResources",
                                "sts:decode-authorization-message"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "VisualEditor3",
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:*:*:*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "RoleForLambda"
                    }
                ]
            }
        },
        "RuleForLambda": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Ejecucion de la funcion Lambda",
                "EventPattern": {
                    "source": [
                        "aws.cloudformation"
                    ],
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail": {
                        "eventSource": [
                            "cloudformation.amazonaws.com"
                        ],
                        "eventName": [
                            "CreateStack"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "FunctionLambda",
                                "Arn"
                            ]
                        },
                        "Id": "TargetRuleLambda"
                    }
                ]
            }
        },
        "Permission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "FunctionLambda",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "RuleForLambda",
                        "Arn"
                    ]
                }
            }
        }
    }
}